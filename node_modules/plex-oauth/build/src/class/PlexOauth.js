"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlexOauth = void 0;
var AuthPin_1 = require("./AuthPin");
var LinkHelper_1 = require("../helpers/LinkHelper");
var PlexOauth = /** @class */ (function () {
    /**
     * Create an instance of the 'PlexOauth' class
     * @param {IPlexClientDetails} clientIdentifier Unique identifier for your client (Should be different for every client)
     */
    function PlexOauth(clientInfo) {
        this.clientInfo = clientInfo;
        this.authPin = new AuthPin_1.AuthPin();
    }
    /**
     * Request the hosted UI link for your app. A user will use this link to sign in and authenticate with Plex.
     * This gets returned with the pin id needed to query the Plex Pin API for the auth token
     * @returns {Promise<[string, number]} [hostedUIUrl, pinId] - Returns a promise of the hosted login URL and the pin Id as a tuple
     */
    PlexOauth.prototype.requestHostedLoginURL = function () {
        var _this = this;
        return this.authPin.getPin(this.clientInfo).then(function (codeResponse) {
            return [
                LinkHelper_1.LinkHelper.PLEX_AUTH_BASE_PATH + "#?code=" + codeResponse.code + "&context[device][product]=" + _this.clientInfo.product + "&context[device][device]=" + _this.clientInfo.device + "&clientID=" + codeResponse.clientIdentifier + "&forwardUrl=" + _this.clientInfo.forwardUrl,
                codeResponse.id
            ];
        }).catch(function (err) {
            throw err;
        });
    };
    /**
     * After a user signs in with the hosted UI, we need to check the Plex API for the auth token.
     * This function will poll their API looking for the auth token and returning it if found.
     * If the auth token is not found, this function will return null
     * @param {number} pinId The pinId to query for
     * @param {number} requestDelay The amount of delay in milliseconds. Can not go below 1000 (1 second)
     * @param {number} maxRetries The maximum number of retries until an auth token is received
     *
     * @returns {Promise<string | null>} The authtoken if found or null
     */
    PlexOauth.prototype.checkForAuthToken = function (pinId, requestDelay, maxRetries) {
        if (!pinId) {
            throw new Error("Pin Id is not set - Unable to poll for auth token without id");
        }
        // If 'requestDelay' or 'maxRetries' is not set, then we will treat this
        // as a single request, so we only request the auth token from the api once
        requestDelay = requestDelay || 1000;
        maxRetries = maxRetries || 0;
        return this.authPin.pollForAuthToken(this.clientInfo, pinId, requestDelay, maxRetries).then(function (authToken) {
            return authToken;
        }).catch(function (err) {
            throw err;
        });
    };
    return PlexOauth;
}());
exports.PlexOauth = PlexOauth;
//# sourceMappingURL=PlexOauth.js.map