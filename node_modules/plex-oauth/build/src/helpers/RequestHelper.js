"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHelper = void 0;
var axios_1 = __importDefault(require("axios"));
/**
 * Class to facilitate the different web requests needed to query the Plex OAuth API
 */
var RequestHelper = /** @class */ (function () {
    function RequestHelper() {
    }
    /**
     * Make a GET request to the specified endpoint
     * @param {string} url Request URL
     * @param {OutgoingHttpHeaders} headers Additional headers to be passed to the request
     *
     * @returns {Promise<any>} A promise containing the result of the GET request
     */
    RequestHelper.get = function (url, headers) {
        return axios_1.default.get(url, {
            headers: __assign({ "Content-Type": "application/json", "Accept": "application/json" }, headers)
        }).then(function (response) {
            return response.data;
        });
    };
    /**
     * Make a POST request to the specified endpoint
     * @param {string} url Request URL
     * @param {string} body Body as a JSON String
     * @param {OutgoingHttpHeaders} headers Additional headers to be passed to the request
     *
     * @returns {Promise<any>} A promise containing the result of the POST request
     */
    RequestHelper.post = function (url, body, headers) {
        return axios_1.default.post(url, body, {
            headers: __assign({ "Content-Type": "application/json", "Accept": "application/json" }, headers)
        }).then(function (response) {
            return response.data;
        });
    };
    return RequestHelper;
}());
exports.RequestHelper = RequestHelper;
//# sourceMappingURL=RequestHelper.js.map